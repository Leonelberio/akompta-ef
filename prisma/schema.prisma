// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id             Int             @id @default(autoincrement())
  ownerId        String
  user           User            @relation(fields: [ownerId], references: [id])
  name           String
  description    String?
  financialYears FinancialYear[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model FinancialYear {
  id        Int      @id @default(autoincrement())
  year      Int
  startDate DateTime
  endDate   DateTime
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  balance   Balance? // Relation is optional to allow for financial years without a balance
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Balance {
  id                  Int                  @id @default(autoincrement())
  financialYearId     Int                  @unique
  financialYear       FinancialYear        @relation(fields: [financialYearId], references: [id])
  data                Json // The CSV imported data will be stored as JSON
  financialStatements FinancialStatement[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model FinancialStatement {
  id        Int      @id @default(autoincrement())
  balanceId Int
  balance   Balance  @relation(fields: [balanceId], references: [id])
  type      String // Par exemple: Bilan, TFT, etc.
  content   Json // Les données structurées pour les états financiers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
